on:
  pull_request:
    types: [closed]
    branches: [main]

env:
  REGISTRY: ${{ vars.REGISTRY }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  PUBLISHER: ${{ vars.PUBLISHER }}
  PUBLISHER_EMAIL: ${{ vars.PUBLISHER_EMAIL }}

jobs:
  on-minor:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged && startsWith(github.head_ref, 'develop')
    outputs:
      version: ${{ steps.version.outputs.v-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Increment minor version
        uses: reecetech/version-increment@2024.4.4
        id: version
        with:
          increment: minor

  on-patch:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged && startsWith(github.head_ref, 'hotfix')
    outputs:
      version: ${{ steps.version.outputs.v-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Increment minor version
        uses: reecetech/version-increment@2024.4.4
        id: version
        with:
          increment: patch

  version:
    runs-on: ubuntu-latest
    if: always() && (needs.on-minor.result == 'success' || needs.on-patch.result == 'success')
    needs: [on-minor, on-patch]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - id: version
        run: |
          ${{ needs.on-minor.result == 'success' }} && VERSION=${{ needs.on-minor.outputs.version }}
          ${{ needs.on-patch.result == 'success' }} && VERSION=${{ needs.on-patch.outputs.version }}
          echo "version=${VERSION:='v0.0.0'}" >> "$GITHUB_OUTPUT"

  release:
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() }}
    needs: [version]
    outputs:
      body: ${{ steps.build_changelog.outputs.changelog }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Create tag
        uses: rickstaa/action-create-tag@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ needs.version.outputs.version }}
          message: Release ${{ needs.version.outputs.version }}

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ needs.version.outputs.version }}
          tag_name: ${{ needs.version.outputs.version }}
          body: ${{ steps.build_changelog.outputs.changelog }}

  deploy-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        uses: fabiocaccamo/create-matrix-action@v4
        with:
          matrix: ${{ vars.IMAGES_MATRIX }}

  deploy-docker-image:
    name: Deploy ${{ matrix.image }} image
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() }}
    needs: [version, release, deploy-matrix]
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.deploy-matrix.outputs.matrix) }}

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.PUBLISHER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        env:
          VERSION: ${{ needs.version.outputs.version }}
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image }}
          tags: |
            type=semver,pattern={{raw}},value=${{ env.VERSION }}
            type=semver,pattern={{version}},value=${{ env.VERSION }}
            type=semver,pattern=v{{major}}.{{minor}},value${{ env.VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }}
            type=semver,pattern=v{{major}},value=${{ env.VERSION }}
          labels: |
            org.opencontainers.image.title=${{ matrix.image }}
            org.opencontainers.image.description=${{ needs.release.outputs.body }}
            org.opencontainers.image.vendor=${{ env.PUBLISHER }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/${{ matrix.image }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ matrix.image }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
